--
-- Test domains.
--
-- Test Comment / Drop
create domain domaindroptest int4;
comment on domain domaindroptest is 'About to drop this..';
create domain dependenttypetest domaindroptest;
-- fail because of dependent type
drop domain domaindroptest;
ERROR:  cannot drop type domaindroptest because other objects depend on it
DETAIL:  type dependenttypetest depends on type domaindroptest
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
drop domain domaindroptest cascade;
NOTICE:  drop cascades to type dependenttypetest
-- this should fail because already gone
drop domain domaindroptest cascade;
ERROR:  type "domaindroptest" does not exist
-- Test domain input.
-- Note: the point of checking both INSERT and COPY FROM is that INSERT
-- exercises CoerceToDomain while COPY exercises domain_in.
create domain domainvarchar varchar(5);
create domain domainnumeric numeric(8,2);
create domain domainint4 int4;
create domain domaintext text;
-- Test explicit coercions --- these should succeed (and truncate)
SELECT cast('123456' as domainvarchar);
 domainvarchar 
---------------
 12345
(1 row)

SELECT cast('12345' as domainvarchar);
 domainvarchar 
---------------
 12345
(1 row)

-- Test tables using domains
create table basictest
           ( testint4 domainint4
           , testtext domaintext
           , testvarchar domainvarchar
           , testnumeric domainnumeric
           );
INSERT INTO basictest values ('88', 'haha', 'short', '123.12');      -- Good
INSERT INTO basictest values ('88', 'haha', 'short text', '123.12'); -- Bad varchar
ERROR:  value too long for type character varying(5)
INSERT INTO basictest values ('88', 'haha', 'short', '123.1212');    -- Truncate numeric
-- Test copy
COPY basictest (testvarchar) FROM stdin; -- fail
ERROR:  value too long for type character varying(5)
CONTEXT:  COPY basictest, line 1, column testvarchar: "notsoshorttext"
COPY basictest (testvarchar) FROM stdin;
select * from basictest order by 1, 2, 3, 4;
 testint4 | testtext | testvarchar | testnumeric 
----------+----------+-------------+-------------
       88 | haha     | short       |      123.12
       88 | haha     | short       |      123.12
          |          | short       |            
(3 rows)

-- check that domains inherit operations from base types
select testtext || testvarchar as concat, testnumeric + 42 as sum
from basictest order by 1,2;
  concat   |  sum   
-----------+--------
 hahashort | 165.12
 hahashort | 165.12
           |       
(3 rows)

-- check that union/case/coalesce type resolution handles domains properly
select coalesce(4::domainint4, 7) is of (int4) as t;
 t 
---
 t
(1 row)

select coalesce(4::domainint4, 7) is of (domainint4) as f;
 f 
---
 f
(1 row)

select coalesce(4::domainint4, 7::domainint4) is of (domainint4) as t;
 t 
---
 t
(1 row)

drop table basictest;
drop domain domainvarchar restrict;
drop domain domainnumeric restrict;
drop domain domainint4 restrict;
drop domain domaintext;
-- Test domains over array types
create domain domainint4arr int4[1];
create domain domainchar4arr varchar(4)[2][3];
create table domarrtest
           ( testint4arr domainint4arr
           , testchar4arr domainchar4arr
            );
INSERT INTO domarrtest values ('{2,2}', '{{"a","b"},{"c","d"}}');
INSERT INTO domarrtest values ('{{2,2},{2,2}}', '{{"a","b"}}');
INSERT INTO domarrtest values ('{2,2}', '{{"a","b"},{"c","d"},{"e","f"}}');
INSERT INTO domarrtest values ('{2,2}', '{{"a"},{"c"}}');
INSERT INTO domarrtest values (NULL, '{{"a","b","c"},{"d","e","f"}}');
INSERT INTO domarrtest values (NULL, '{{"toolong","b","c"},{"d","e","f"}}');
ERROR:  value too long for type character varying(4)
select * from domarrtest order by 1, 2;
  testint4arr  |    testchar4arr     
---------------+---------------------
 {2,2}         | {{a,b},{c,d}}
 {2,2}         | {{a,b},{c,d},{e,f}}
 {2,2}         | {{a},{c}}
 {{2,2},{2,2}} | {{a,b}}
               | {{a,b,c},{d,e,f}}
(5 rows)

select testint4arr[1], testchar4arr[2:2] from domarrtest order by 1, 2;
 testint4arr | testchar4arr 
-------------+--------------
           2 | {{c}}
           2 | {{c,d}}
           2 | {{c,d}}
             | {}
             | {{d,e,f}}
(5 rows)

select array_dims(testint4arr), array_dims(testchar4arr) from domarrtest order by 1, 2;
 array_dims | array_dims 
------------+------------
 [1:2]      | [1:2][1:1]
 [1:2]      | [1:2][1:2]
 [1:2]      | [1:3][1:2]
 [1:2][1:2] | [1:1][1:2]
            | [1:2][1:3]
(5 rows)

COPY domarrtest FROM stdin;
COPY domarrtest FROM stdin;	-- fail
ERROR:  value too long for type character varying(4)
CONTEXT:  COPY domarrtest, line 1, column testchar4arr: "{qwerty,w,e}"
select * from domarrtest order by 1, 2;
  testint4arr  |    testchar4arr     
---------------+---------------------
 {2,2}         | {{a,b},{c,d}}
 {2,2}         | {{a,b},{c,d},{e,f}}
 {2,2}         | {{a},{c}}
 {{2,2},{2,2}} | {{a,b}}
 {3,4}         | {q,w,e}
               | {{a,b,c},{d,e,f}}
               | 
(7 rows)

drop table domarrtest;
drop domain domainint4arr restrict;
drop domain domainchar4arr restrict;
create domain dia as int[];
select '{1,2,3}'::dia;
   dia   
---------
 {1,2,3}
(1 row)

select array_dims('{1,2,3}'::dia);
 array_dims 
------------
 [1:3]
(1 row)

select pg_typeof('{1,2,3}'::dia);
 pg_typeof 
-----------
 dia
(1 row)

select pg_typeof('{1,2,3}'::dia || 42); -- should be int[] not dia
 pg_typeof 
-----------
 integer[]
(1 row)

drop domain dia;
create domain dnotnull varchar(15) NOT NULL;
create domain dnull    varchar(15);
create domain dcheck   varchar(15) NOT NULL CHECK (VALUE = 'a' OR VALUE = 'c' OR VALUE = 'd');
create table nulltest
           ( col1 dnotnull
           , col2 dnotnull NULL  -- NOT NULL in the domain cannot be overridden
           , col3 dnull    NOT NULL
           , col4 dnull
           , col5 dcheck CHECK (col5 IN ('c', 'd'))
           );
INSERT INTO nulltest DEFAULT VALUES;
ERROR:  domain dnotnull does not allow null values
INSERT INTO nulltest values ('a', 'b', 'c', 'd', 'c');  -- Good
insert into nulltest values ('a', 'b', 'c', 'd', NULL);
ERROR:  domain dcheck does not allow null values
insert into nulltest values ('a', 'b', 'c', 'd', 'a');
ERROR:  new row for relation "nulltest" violates check constraint "nulltest_col5_check"
DETAIL:  Failing row contains (a, b, c, d, a).
INSERT INTO nulltest values (NULL, 'b', 'c', 'd', 'd');
ERROR:  domain dnotnull does not allow null values
INSERT INTO nulltest values ('a', NULL, 'c', 'd', 'c');
ERROR:  domain dnotnull does not allow null values
INSERT INTO nulltest values ('a', 'b', NULL, 'd', 'c');
ERROR:  null value in column "col3" violates not-null constraint
DETAIL:  Failing row contains (a, b, null, d, c).
INSERT INTO nulltest values ('a', 'b', 'c', NULL, 'd'); -- Good
-- Test copy
COPY nulltest FROM stdin; --fail
ERROR:  null value in column "col3" violates not-null constraint
DETAIL:  Failing row contains (a, b, null, d, d).
COPY nulltest FROM stdin; --fail
ERROR:  domain dcheck does not allow null values
CONTEXT:  COPY nulltest, line 1, column col5: null input
-- Last row is bad
COPY nulltest FROM stdin;
ERROR:  new row for relation "nulltest" violates check constraint "nulltest_col5_check"
DETAIL:  Failing row contains (a, b, c, null, a).
select * from nulltest order by 1, 2, 3, 4, 5;
 col1 | col2 | col3 | col4 | col5 
------+------+------+------+------
 a    | b    | c    | d    | c
 a    | b    | c    |      | d
(2 rows)

-- Test out coerced (casted) constraints
SELECT cast('1' as dnotnull);
 dnotnull 
----------
 1
(1 row)

SELECT cast(NULL as dnotnull); -- fail
ERROR:  domain dnotnull does not allow null values
SELECT cast(cast(NULL as dnull) as dnotnull); -- fail
ERROR:  domain dnotnull does not allow null values
SELECT cast(col4 as dnotnull) from nulltest; -- fail
ERROR:  domain dnotnull does not allow null values
-- cleanup
drop table nulltest;
drop domain dnotnull restrict;
drop domain dnull restrict;
drop domain dcheck restrict;
create domain ddef1 int4 DEFAULT 3;
create domain ddef2 oid DEFAULT '12';
-- Type mixing, function returns int8
create domain ddef3 text DEFAULT 5;
create sequence ddef4_seq;
create domain ddef4 int4 DEFAULT nextval('ddef4_seq');
create domain ddef5 numeric(8,2) NOT NULL DEFAULT '12.12';
create table defaulttest
            ( col1 ddef1
            , col2 ddef2
            , col3 ddef3
            , col4 ddef4 PRIMARY KEY
            , col5 ddef1 NOT NULL DEFAULT NULL
            , col6 ddef2 DEFAULT '88'
            , col7 ddef4 DEFAULT 8000
            , col8 ddef5
            );
ERROR:  Column col4 is not a hash distributable data type
insert into defaulttest(col4) values(0); -- fails, col5 defaults to null
ERROR:  relation "defaulttest" does not exist
LINE 1: insert into defaulttest(col4) values(0);
                    ^
alter table defaulttest alter column col5 drop default;
ERROR:  relation "defaulttest" does not exist
insert into defaulttest default values; -- succeeds, inserts domain default
ERROR:  relation "defaulttest" does not exist
LINE 1: insert into defaulttest default values;
                    ^
-- We used to treat SET DEFAULT NULL as equivalent to DROP DEFAULT; wrong
alter table defaulttest alter column col5 set default null;
ERROR:  relation "defaulttest" does not exist
insert into defaulttest(col4) values(0); -- fails
ERROR:  relation "defaulttest" does not exist
LINE 1: insert into defaulttest(col4) values(0);
                    ^
alter table defaulttest alter column col5 drop default;
ERROR:  relation "defaulttest" does not exist
insert into defaulttest default values;
ERROR:  relation "defaulttest" does not exist
LINE 1: insert into defaulttest default values;
                    ^
insert into defaulttest default values;
ERROR:  relation "defaulttest" does not exist
LINE 1: insert into defaulttest default values;
                    ^
-- Test defaults with copy
COPY defaulttest(col5) FROM stdin;
ERROR:  relation "defaulttest" does not exist
42
\.
invalid command \.
select * from defaulttest order by 1,2,3,4,5,6,7,8;
ERROR:  syntax error at or near "42"
LINE 1: 42
        ^
drop table defaulttest cascade;
ERROR:  table "defaulttest" does not exist
-- Test ALTER DOMAIN .. NOT NULL
create domain dnotnulltest integer;
create table domnotnull
( col1 dnotnulltest
, col2 dnotnulltest
);
insert into domnotnull default values;
alter domain dnotnulltest set not null; -- fails
ERROR:  column "col1" of table "domnotnull" contains null values
update domnotnull set col1 = 5;
alter domain dnotnulltest set not null; -- fails
ERROR:  column "col2" of table "domnotnull" contains null values
update domnotnull set col2 = 6;
alter domain dnotnulltest set not null;
update domnotnull set col1 = null; -- fails
ERROR:  domain dnotnulltest does not allow null values
alter domain dnotnulltest drop not null;
update domnotnull set col1 = null;
drop domain dnotnulltest cascade;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table domnotnull column col1
drop cascades to table domnotnull column col2
-- Test ALTER DOMAIN .. DEFAULT ..
create table domdeftest (col1 ddef1);
insert into domdeftest default values;
select * from domdeftest order by 1;
 col1 
------
    3
(1 row)

alter domain ddef1 set default '42';
insert into domdeftest default values;
select * from domdeftest order by 1;
 col1 
------
    3
   42
(2 rows)

alter domain ddef1 drop default;
insert into domdeftest default values;
select * from domdeftest order by 1;
 col1 
------
    1
    3
   14
   18
   89
  114
  120
  124
  197
  214
  215
  247
  248
  258
  283
  285
  289
  304
  309
  327
  353
  386
  394
  474
  483
  529
  546
  589
  728
  779
  785
  791
  808
  816
  877
  921
  934
 1033
 1035
 1069
 1074
 1091
 1112
 1118
 1122
 1126
 1150
 1226
 1295
 1302
 1324
 1347
 1351
 1367
 1376
 1378
 1382
 1383
 1394
 1432
 1440
 1449
 1454
 1457
 1465
 1486
 1501
 1515
 1521
 1532
 1548
 1572
 1577
 1578
 1582
 1660
 1677
 1697
 1730
 1735
 1780
 1781
 1802
 1823
 1830
 1842
 1863
 1868
 1874
 1883
 1898
 1915
 1927
 1962
 2013
 2021
 2058
 2125
 2153
 2188
 2194
 2268
 2281
 2284
 2301
 2327
 2336
 2346
 2363
 2365
 2368
 2384
 2436
 2457
 2459
 2472
 2502
 2505
 2514
 2527
 2540
 2552
 2571
 2588
 2612
 2664
 2691
 2714
 2725
 2727
 2730
 2742
 2746
 2763
 2769
 2775
 2780
 2781
 2785
 2842
 2876
 2879
 2905
 2932
 2993
 2994
 3015
 3024
 3061
 3067
 3073
 3118
 3130
 3152
 3161
 3173
 3190
 3205
 3244
 3249
 3265
 3290
 3306
 3333
 3334
 3346
 3402
 3417
 3419
 3451
 3499
 3517
 3525
 3529
 3568
 3569
 3592
 3597
 3606
 3635
 3643
 3646
 3663
 3683
 3710
 3712
 3750
 3761
 3778
 3813
 3822
 3830
 3843
 3901
 3921
 3956
 3961
 3990
 4067
 4084
 4105
 4130
 4176
 4178
 4184
 4188
 4200
 4203
 4204
 4212
 4217
 4222
 4251
 4256
 4268
 4277
 4294
 4320
 4395
 4401
 4405
 4455
 4456
 4522
 4530
 4556
 4560
 4562
 4579
 4598
 4681
 4690
 4707
 4727
 4738
 4741
 4771
 4774
 4777
 4781
 4830
 4873
 4877
 4917
 4922
 4945
 4965
 4971
 4972
 4984
 4987
 5004
 5010
 5031
 5068
 5080
 5090
 5095
 5113
 5121
 5131
 5178
 5191
 5220
 5224
 5226
 5232
 5262
 5325
 5332
 5334
 5359
 5363
 5367
 5374
 5499
 5504
 5511
 5563
 5564
 5593
 5595
 5638
 5674
 5694
 5727
 5734
 5741
 5747
 5750
 5751
 5763
 5791
 5830
 5837
 5854
 5871
 5919
 5947
 5968
 5996
 6028
 6047
 6049
 6065
 6066
 6077
 6086
 6122
 6129
 6170
 6179
 6205
 6279
 6294
 6300
 6306
 6311
 6322
 6325
 6341
 6352
 6391
 6413
 6464
 6469
 6541
 6546
 6568
 6611
 6634
 6711
 6728
 6750
 6764
 6769
 6786
 6797
 6812
 6818
 6835
 6844
 6855
 6876
 6914
 6922
 6926
 6931
 6947
 6985
 6992
 7061
 7084
 7094
 7097
 7106
 7173
 7188
 7194
 7220
 7270
 7290
 7309
 7348
 7378
 7416
 7444
 7456
 7489
 7509
 7529
 7540
 7563
 7591
 7594
 7601
 7630
 7636
 7683
 7688
 7690
 7691
 7702
 7705
 7710
 7712
 7729
 7731
 7778
 7787
 7798
 7805
 7808
 7815
 7839
 7842
 7861
 7862
 7872
 7922
 7941
 7946
 7958
 8003
 8004
 8024
 8032
 8040
 8049
 8083
 8084
 8100
 8174
 8177
 8180
 8184
 8203
 8216
 8228
 8260
 8281
 8300
 8316
 8341
 8396
 8431
 8442
 8479
 8545
 8565
 8576
 8588
 8613
 8641
 8648
 8651
 8664
 8672
 8679
 8694
 8750
 8772
 8803
 8805
 8854
 8859
 8860
 8864
 8913
 8974
 8975
 8993
 8996
 9001
 9012
 9054
 9105
 9107
 9120
 9130
 9152
 9156
 9172
 9186
 9194
 9204
 9210
 9215
 9258
 9287
 9346
 9368
 9395
 9417
 9446
 9459
 9476
 9489
 9514
 9524
 9530
 9548
 9585
 9610
 9640
 9667
 9703
 9710
 9723
 9755
 9761
 9769
 9775
 9809
 9812
 9827
 9834
 9835
 9860
 9905
 9953
 9977
     
(503 rows)

drop table domdeftest;
-- Test ALTER DOMAIN .. CONSTRAINT ..
create domain con as integer;
create table domcontest (col1 con);
insert into domcontest values (1);
insert into domcontest values (2);
alter domain con add constraint t check (VALUE < 1); -- fails
ERROR:  column "col1" of table "domcontest" contains values that violate the new constraint
alter domain con add constraint t check (VALUE < 34);
alter domain con add check (VALUE > 0);
insert into domcontest values (-5); -- fails
ERROR:  value for domain con violates check constraint "con_check"
insert into domcontest values (42); -- fails
ERROR:  value for domain con violates check constraint "t"
insert into domcontest values (5);
alter domain con drop constraint t;
insert into domcontest values (-5); --fails
ERROR:  value for domain con violates check constraint "con_check"
insert into domcontest values (42);
alter domain con drop constraint nonexistent;
ERROR:  constraint "nonexistent" of domain "con" does not exist
alter domain con drop constraint if exists nonexistent;
NOTICE:  constraint "nonexistent" of domain "con" does not exist, skipping
-- Test ALTER DOMAIN .. CONSTRAINT .. NOT VALID
create domain things AS INT;
CREATE TABLE thethings (stuff things);
INSERT INTO thethings (stuff) VALUES (55);
ALTER DOMAIN things ADD CONSTRAINT meow CHECK (VALUE < 11);
ERROR:  column "stuff" of table "thethings" contains values that violate the new constraint
ALTER DOMAIN things ADD CONSTRAINT meow CHECK (VALUE < 11) NOT VALID;
ALTER DOMAIN things VALIDATE CONSTRAINT meow;
ERROR:  column "stuff" of table "thethings" contains values that violate the new constraint
UPDATE thethings SET stuff = 10;
ALTER DOMAIN things VALIDATE CONSTRAINT meow;
-- Confirm ALTER DOMAIN with RULES.
create table domtab (col1 integer);
create domain dom as integer;
create view domview as select cast(col1 as dom) from domtab;
insert into domtab (col1) values (null);
insert into domtab (col1) values (5);
select * from domview order by 1;
 col1 
------
    5
     
(2 rows)

alter domain dom set not null;
select * from domview; -- fail
ERROR:  domain dom does not allow null values
alter domain dom drop not null;
select * from domview order by 1;
 col1 
------
    5
     
(2 rows)

alter domain dom add constraint domchkgt6 check(value > 6);
select * from domview; --fail
ERROR:  value for domain dom violates check constraint "domchkgt6"
alter domain dom drop constraint domchkgt6 restrict;
select * from domview order by 1;
 col1 
------
    5
     
(2 rows)

-- cleanup
drop domain ddef1 restrict;
drop domain ddef2 restrict;
drop domain ddef3 restrict;
drop domain ddef4 restrict;
drop domain ddef5 restrict;
drop sequence ddef4_seq;
-- Test domains over domains
create domain vchar4 varchar(4);
create domain dinter vchar4 check (substring(VALUE, 1, 1) = 'x');
create domain dtop dinter check (substring(VALUE, 2, 1) = '1');
select 'x123'::dtop;
 dtop 
------
 x123
(1 row)

select 'x1234'::dtop; -- explicit coercion should truncate
 dtop 
------
 x123
(1 row)

select 'y1234'::dtop; -- fail
ERROR:  value for domain dtop violates check constraint "dinter_check"
select 'y123'::dtop; -- fail
ERROR:  value for domain dtop violates check constraint "dinter_check"
select 'yz23'::dtop; -- fail
ERROR:  value for domain dtop violates check constraint "dinter_check"
select 'xz23'::dtop; -- fail
ERROR:  value for domain dtop violates check constraint "dtop_check"
create temp table dtest(f1 dtop);
insert into dtest values('x123');
insert into dtest values('x1234'); -- fail, implicit coercion
ERROR:  value too long for type character varying(4)
insert into dtest values('y1234'); -- fail, implicit coercion
ERROR:  value too long for type character varying(4)
insert into dtest values('y123'); -- fail
ERROR:  value for domain dtop violates check constraint "dinter_check"
insert into dtest values('yz23'); -- fail
ERROR:  value for domain dtop violates check constraint "dinter_check"
insert into dtest values('xz23'); -- fail
ERROR:  value for domain dtop violates check constraint "dtop_check"
drop table dtest;
drop domain vchar4 cascade;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to type dinter
drop cascades to type dtop
-- Make sure that constraints of newly-added domain columns are
-- enforced correctly, even if there's no default value for the new
-- column. Per bug #1433
create domain str_domain as text not null;
create table domain_test (a int, b int);
insert into domain_test values (1, 2);
insert into domain_test values (1, 2);
-- should fail
alter table domain_test add column c str_domain;
ERROR:  domain str_domain does not allow null values
create domain str_domain2 as text check (value <> 'foo') default 'foo';
-- should fail
alter table domain_test add column d str_domain2;
ERROR:  value for domain str_domain2 violates check constraint "str_domain2_check"
-- Check that domain constraints on prepared statement parameters of
-- unknown type are enforced correctly.
create domain pos_int as int4 check (value > 0) not null;
prepare s1 as select $1::pos_int = 10 as "is_ten";
execute s1(10);
 is_ten 
--------
 t
(1 row)

execute s1(0); -- should fail
ERROR:  value for domain pos_int violates check constraint "pos_int_check"
execute s1(NULL); -- should fail
ERROR:  domain pos_int does not allow null values
-- Check that domain constraints on plpgsql function parameters, results,
-- and local variables are enforced correctly.
create function doubledecrement(p1 pos_int) returns pos_int as $$
declare v pos_int;
begin
    return p1;
end$$ language plpgsql;
select doubledecrement(3); -- fail because of implicit null assignment
ERROR:  domain pos_int does not allow null values
CONTEXT:  PL/pgSQL function doubledecrement(pos_int) line 3 during statement block local variable initialization
create or replace function doubledecrement(p1 pos_int) returns pos_int as $$
declare v pos_int := 0;
begin
    return p1;
end$$ language plpgsql;
select doubledecrement(3); -- fail at initialization assignment
ERROR:  value for domain pos_int violates check constraint "pos_int_check"
CONTEXT:  PL/pgSQL function doubledecrement(pos_int) line 3 during statement block local variable initialization
create or replace function doubledecrement(p1 pos_int) returns pos_int as $$
declare v pos_int := 1;
begin
    v := p1 - 1;
    return v - 1;
end$$ language plpgsql;
select doubledecrement(null); -- fail before call
ERROR:  domain pos_int does not allow null values
select doubledecrement(0); -- fail before call
ERROR:  value for domain pos_int violates check constraint "pos_int_check"
select doubledecrement(1); -- fail at assignment to v
ERROR:  value for domain pos_int violates check constraint "pos_int_check"
CONTEXT:  PL/pgSQL function doubledecrement(pos_int) line 4 at assignment
select doubledecrement(2); -- fail at return
ERROR:  value for domain pos_int violates check constraint "pos_int_check"
CONTEXT:  PL/pgSQL function doubledecrement(pos_int) while casting return value to function's return type
select doubledecrement(3); -- good
 doubledecrement 
-----------------
               1
(1 row)

-- Check that ALTER DOMAIN tests columns of derived types
create domain posint as int4;
-- Currently, this doesn't work for composite types, but verify it complains
create type ddtest1 as (f1 posint);
create table ddtest2(f1 ddtest1);
insert into ddtest2 values(row(-1));
alter domain posint add constraint c1 check(value >= 0);
ERROR:  cannot alter type "posint" because column "ddtest2.f1" uses it
drop table ddtest2;
create table ddtest2(f1 ddtest1[]);
insert into ddtest2 values('{(-1)}');
alter domain posint add constraint c1 check(value >= 0);
ERROR:  cannot alter type "posint" because column "ddtest2.f1" uses it
drop table ddtest2;
alter domain posint add constraint c1 check(value >= 0);
create domain posint2 as posint check (value % 2 = 0);
create table ddtest2(f1 posint2);
insert into ddtest2 values(11); -- fail
ERROR:  value for domain posint2 violates check constraint "posint2_check"
insert into ddtest2 values(-2); -- fail
ERROR:  value for domain posint2 violates check constraint "c1"
insert into ddtest2 values(2);
alter domain posint add constraint c2 check(value >= 10); -- fail
ERROR:  column "f1" of table "ddtest2" contains values that violate the new constraint
alter domain posint add constraint c2 check(value > 0); -- OK
drop table ddtest2;
drop type ddtest1;
drop domain posint cascade;
NOTICE:  drop cascades to type posint2
--
-- Check enforcement of domain-related typmod in plpgsql (bug #5717)
--
create or replace function array_elem_check(numeric) returns numeric as $$
declare
  x numeric(4,2)[1];
begin
  x[1] := $1;
  return x[1];
end$$ language plpgsql;
select array_elem_check(121.00);
ERROR:  numeric field overflow
DETAIL:  A field with precision 4, scale 2 must round to an absolute value less than 10^2.
CONTEXT:  PL/pgSQL function array_elem_check(numeric) line 5 at assignment
select array_elem_check(1.23456);
 array_elem_check 
------------------
             1.23
(1 row)

create domain mynums as numeric(4,2)[1];
create or replace function array_elem_check(numeric) returns numeric as $$
declare
  x mynums;
begin
  x[1] := $1;
  return x[1];
end$$ language plpgsql;
select array_elem_check(121.00);
ERROR:  numeric field overflow
DETAIL:  A field with precision 4, scale 2 must round to an absolute value less than 10^2.
CONTEXT:  PL/pgSQL function array_elem_check(numeric) line 5 at assignment
select array_elem_check(1.23456);
 array_elem_check 
------------------
             1.23
(1 row)

create domain mynums2 as mynums;
create or replace function array_elem_check(numeric) returns numeric as $$
declare
  x mynums2;
begin
  x[1] := $1;
  return x[1];
end$$ language plpgsql;
select array_elem_check(121.00);
ERROR:  numeric field overflow
DETAIL:  A field with precision 4, scale 2 must round to an absolute value less than 10^2.
CONTEXT:  PL/pgSQL function array_elem_check(numeric) line 5 at assignment
select array_elem_check(1.23456);
 array_elem_check 
------------------
             1.23
(1 row)

drop function array_elem_check(numeric);
--
-- Check enforcement of array-level domain constraints
--
create domain orderedpair as int[2] check (value[1] < value[2]);
select array[1,2]::orderedpair;
 array 
-------
 {1,2}
(1 row)

select array[2,1]::orderedpair;  -- fail
ERROR:  value for domain orderedpair violates check constraint "orderedpair_check"
create temp table op (f1 orderedpair);
insert into op values (array[1,2]);
insert into op values (array[2,1]);  -- fail
ERROR:  value for domain orderedpair violates check constraint "orderedpair_check"
update op set f1[2] = 3;
update op set f1[2] = 0;  -- fail
ERROR:  value for domain orderedpair violates check constraint "orderedpair_check"
select * from op;
  f1   
-------
 {1,3}
(1 row)

create or replace function array_elem_check(int) returns int as $$
declare
  x orderedpair := '{1,2}';
begin
  x[2] := $1;
  return x[2];
end$$ language plpgsql;
select array_elem_check(3);
 array_elem_check 
------------------
                3
(1 row)

select array_elem_check(-1);
ERROR:  value for domain orderedpair violates check constraint "orderedpair_check"
CONTEXT:  PL/pgSQL function array_elem_check(integer) line 5 at assignment
drop function array_elem_check(int);
--
-- Renaming
--
create domain testdomain1 as int;
alter domain testdomain1 rename to testdomain2;
alter type testdomain2 rename to testdomain3;  -- alter type also works
drop domain testdomain3;
--
-- Renaming domain constraints
--
create domain testdomain1 as int constraint unsigned check (value > 0);
alter domain testdomain1 rename constraint unsigned to unsigned_foo;
alter domain testdomain1 drop constraint unsigned_foo;
drop domain testdomain1;
